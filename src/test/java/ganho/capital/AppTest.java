/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ganho.capital;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class AppTest {
	
	private final ByteArrayOutputStream stdOut = new ByteArrayOutputStream();

	@Before
	public void before() {
		System.setOut(new PrintStream(this.stdOut));
	}

	@After
	public void after() {
		System.setOut(System.out);
	}

	private void escreverStdIn(String input) {
		System.setIn(new ByteArrayInputStream(input.getBytes()));
	}

	@Test
	public void deveCalcularTaxasComUmaOperacaoDeCompraEDuasDeVenda() {
		escreverStdIn("[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 100}, {\"operation\":\"sell\", \"unit-cost\":15.00, \"quantity\": 50}, {\"operation\":\"sell\", \"unit-cost\":15.00, \"quantity\": 50}]\n");
		App.main(null);

		Assert.assertEquals("[{\"tax\":0.00},{\"tax\":0.00},{\"tax\":0.00}]\n", stdOut.toString());
	}

	@Test
	public void deveCalcularTaxasComUmaOperacaoDeCompraEDuasDeVendaComPagamentoDeTaxas() {
		escreverStdIn("[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 10000}, {\"operation\":\"sell\", \"unit-cost\":20.00, \"quantity\": 5000}, {\"operation\":\"sell\", \"unit-cost\":5.00, \"quantity\": 5000}]\n");
		App.main(null);

		Assert.assertEquals("[{\"tax\":0.00},{\"tax\":10000.00},{\"tax\":0.00}]\n", stdOut.toString());
	}

	@Test
	public void deveCalcularDuasLinhasDeOperacaoSeparadas() {
		escreverStdIn("[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 100}, {\"operation\":\"sell\", \"unit-cost\":15.00, \"quantity\": 50}, {\"operation\":\"sell\", \"unit-cost\":15.00, \"quantity\": 50}]\n"
				+ "[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 10000}, {\"operation\":\"sell\", \"unit-cost\":20.00, \"quantity\": 5000}, {\"operation\":\"sell\", \"unit-cost\":5.00, \"quantity\": 5000}]\n");
		App.main(null);
		
		Assert.assertEquals("[{\"tax\":0.00},{\"tax\":0.00},{\"tax\":0.00}]\n"
				+ "[{\"tax\":0.00},{\"tax\":10000.00},{\"tax\":0.00}]\n", stdOut.toString());
	}

	@Test
	public void deveCalcularTaxasComUmaOperacaoDeCompraEDuasDeVendaComTaxaDeMil() {
		escreverStdIn("[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 10000}, {\"operation\":\"sell\", \"unit-cost\":5.00, \"quantity\": 5000}, {\"operation\":\"sell\", \"unit-cost\":20.00, \"quantity\": 3000}]\n");
		App.main(null);

		Assert.assertEquals("[{\"tax\":0.00},{\"tax\":0.00},{\"tax\":1000.00}]\n", stdOut.toString());
	}

	@Test
	public void deveCalcularTaxasComDuasOperacoesDeCompraEUmaDeVenda() {
		escreverStdIn("[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 10000}, {\"operation\":\"buy\", \"unit-cost\":25.00, \"quantity\": 5000}, {\"operation\":\"sell\", \"unit-cost\":15.00, \"quantity\": 10000}]\n");
		App.main(null);

		Assert.assertEquals("[{\"tax\":0.00},{\"tax\":0.00},{\"tax\":0.00}]\n", stdOut.toString());
	}

	@Test
	public void deveCalcularTaxasComDuasOperacoesDeCompraEDuasDeVenda() {
		escreverStdIn("[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 10000}, {\"operation\":\"buy\", \"unit-cost\":25.00, \"quantity\": 5000}, {\"operation\":\"sell\", \"unit-cost\":15.00, \"quantity\": 10000}, {\"operation\":\"sell\", \"unit-cost\":25.00, \"quantity\": 5000}]\n");
		App.main(null);

		Assert.assertEquals("[{\"tax\":0.00},{\"tax\":0.00},{\"tax\":0.00},{\"tax\":10000.00}]\n", stdOut.toString());
	}

	@Test
	public void deveCalcularTaxasComUmaOperacaoDeCompraEQuatroDeVenda() {
		escreverStdIn("[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 10000}, {\"operation\":\"sell\", \"unit-cost\":2.00, \"quantity\": 5000}, {\"operation\":\"sell\", \"unit-cost\":20.00, \"quantity\": 2000}, {\"operation\":\"sell\", \"unit-cost\":20.00, \"quantity\": 2000}, {\"operation\":\"sell\", \"unit-cost\":25.00, \"quantity\": 1000}]\n");
		App.main(null);

		Assert.assertEquals("[{\"tax\":0.00},{\"tax\":0.00},{\"tax\":0.00},{\"tax\":0.00},{\"tax\":3000.00}]\n", stdOut.toString());
	}
	
	@Test
	public void deveCalcularTaxasComOperacoesIntercaladasDeCompraEVenda() {
		escreverStdIn("[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 10000}, {\"operation\":\"sell\", \"unit-cost\":2.00, \"quantity\": 5000}, {\"operation\":\"sell\", \"unit-cost\":20.00, \"quantity\": 2000}, {\"operation\":\"sell\", \"unit-cost\":20.00, \"quantity\": 2000}, {\"operation\":\"sell\", \"unit-cost\":25.00, \"quantity\": 1000}, {\"operation\":\"buy\", \"unit-cost\":20.00, \"quantity\": 10000}, {\"operation\":\"sell\", \"unit-cost\":15.00, \"quantity\": 5000}, {\"operation\":\"sell\", \"unit-cost\":30.00, \"quantity\": 4350}, {\"operation\":\"sell\", \"unit-cost\":30.00, \"quantity\": 650}]\n");
		App.main(null);

		Assert.assertEquals("[{\"tax\":0.00},{\"tax\":0.00},{\"tax\":0.00},{\"tax\":0.00},{\"tax\":3000.00},{\"tax\":0.00},{\"tax\":0.00},{\"tax\":3700.00},{\"tax\":0.00}]\n", stdOut.toString());
	}
	
	@Test
	public void deveCalcularTaxasComQuatroOperacoesIntercaladasDeCompraEVenda() {
		escreverStdIn("[{\"operation\":\"buy\", \"unit-cost\":10.00, \"quantity\": 10000}, {\"operation\":\"sell\", \"unit-cost\":50.00, \"quantity\": 10000}, {\"operation\":\"buy\", \"unit-cost\":20.00, \"quantity\": 10000}, {\"operation\":\"sell\", \"unit-cost\":50.00, \"quantity\": 10000}]\n");
		App.main(null);

		Assert.assertEquals("[{\"tax\":0.00},{\"tax\":80000.00},{\"tax\":0.00},{\"tax\":60000.00}]\n", stdOut.toString());
	}
}
